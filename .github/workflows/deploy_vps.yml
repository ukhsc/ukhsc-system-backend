name: Deploy Service

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: production-deploy
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/ukhsc-system-backend-api

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_ref: ${{ steps.meta.outputs.image_ref }}
      image_tag: ${{ steps.meta.outputs.image_tag }}
      image_version: ${{ steps.meta.outputs.image_version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute Image Metadata
        id: meta
        run: |
          IMAGE_TAG=${GITHUB_SHA}
            # Optionally shorten: IMAGE_TAG=${GITHUB_SHA::12}
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image_version=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "image_ref=${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login "${REGISTRY}" -u "${{ github.repository_owner }}" --password-stdin

      - name: Build & Push (tagged + latest)
        run: |
          echo "${{ secrets.SENTRY_AUTH_TOKEN }}" > .sentry_token
          docker build \
            --secret id=sentry_token,src=.sentry_token \
            --build-arg GIT_COMMIT=${GITHUB_SHA} \
            -t ${REGISTRY}/${IMAGE_NAME}:${{ steps.meta.outputs.image_tag }} \
            -t ${REGISTRY}/${IMAGE_NAME}:latest \
            .
          docker push ${REGISTRY}/${IMAGE_NAME}:${{ steps.meta.outputs.image_tag }}
          docker push ${REGISTRY}/${IMAGE_NAME}:latest
          rm .sentry_token

  deploy:
    name: Deploy on Self-Hosted Runner
    needs: build-and-push
    runs-on: self-hosted
    environment:
      name: production
      url: https://api.ukhsc.org
    permissions:
      contents: read
      deployments: write
      packages: read

    env:
      DOCKER_IMAGE: ${{ needs.build-and-push.outputs.image_ref }}
      SENTRY_RELEASE: ${{ needs.build-and-push.outputs.image_version }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DIRECT_DATABASE_URL: ${{ secrets.DATABASE_URL }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      ARGON2_SECRET: ${{ secrets.ARGON2_SECRET }}
      GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
      GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

    steps:
      - name: Create Deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: []
            });
            return deployment.data.id;

      - name: Set Deployment Status In Progress
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'in_progress',
              description: 'Deployment in progress...',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });

      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure scripts executable
        run: chmod +x scripts/*.sh || true

      - name: Docker Login (read-only)
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login "${REGISTRY}" -u "${{ github.repository_owner }}" --password-stdin

      - name: Pull & Deploy
        run: |
          echo "Pulling image: $DOCKER_IMAGE"
          docker pull "$DOCKER_IMAGE"
          ./scripts/deploy.sh "$DOCKER_IMAGE"

      - name: Update Deployment Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const success = '${{ job.status }}' === 'success';
            const { owner, repo } = context.repo;
            const deployment_id = ${{ steps.deployment.outputs.result }};
            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id,
              state: success ? 'success' : 'failure',
              description: success ? 'Deployment succeeded!' : 'Deployment failed',
              log_url: `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`,
              environment_url: success ? 'https://api.ukhsc.org' : undefined,
              auto_inactive: success
            });
            if (!success) {
              core.setFailed('Deployment failed');
            }

      - name: Generate ISO Timestamp
        id: timestamp
        run: echo "ISO_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Send Discord Notification
        uses: tsickert/discord-webhook@v6.0.0
        if: always()
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          embed-title: 🍔 UKHSC 系統後端部署通知
          embed-description: |
            ### 部署狀態：${{ job.status == 'success' && '✅ 成功' || '❌ 失敗' }}

            **Docker Image：** `${{ env.DOCKER_IMAGE }}`
            **分支：** `${{ github.ref_name }}`
            **提交者：** ${{ github.actor }}
            **提交訊息：** ${{ github.event.head_commit.message }}
            **部署環境：** Self-Hosted Production
            **部署時間：** <t:${{ github.run_id }}:F>

            [查看部署詳細資訊](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            ${{
              job.status == 'success' && '[閱讀部屬版本之技術文件](https://api.ukhsc.org)' || ''
            }}
          embed-color: ${{ job.status == 'success' && '65280' || '16711680' }}
          embed-footer-text: "UKHSC System Backend Deployment"
          embed-timestamp: ${{ steps.timestamp.outputs.ISO_TIME }}
