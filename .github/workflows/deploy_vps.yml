name: Deploy to VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      deployments: write

    steps:
      - name: Create GitHub Deployment
        uses: actions/github-script@v7
        id: deployment
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: []
            });
            console.log('Created deployment:', deployment.data.id);
            return deployment.data.id;

      - name: Set Deployment Status to In Progress
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'in_progress',
              description: 'Deployment in progress...',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Build and push Docker image
        run: |
          echo "${{ secrets.SENTRY_AUTH_TOKEN }}" > .sentry_token
          docker build \
            --secret id=sentry_token,src=.sentry_token \
            --build-arg GIT_COMMIT=${GITHUB_SHA} \
            -t ghcr.io/${{ github.repository_owner }}/ukhsc-system-backend-api:latest .
          docker push ghcr.io/${{ github.repository_owner }}/ukhsc-system-backend-api:latest
          rm .sentry_token

      - name: Copy deployment scripts to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_IP }}
          username: root
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "scripts/*"
          target: "/root/deployment"

      - name: Deploy to VPS using SSH
        uses: appleboy/ssh-action@v1.2.0
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          ARGON2_SECRET: ${{ secrets.ARGON2_SECRET }}
          GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
          GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_RELEASE: ${{ github.sha }}
          DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/ukhsc-system-backend-api:latest
        with:
          host: ${{ secrets.VPS_IP }}
          username: root
          key: ${{ secrets.VPS_SSH_KEY }}
          envs: DATABASE_URL,DIRECT_DATABASE_URL,JWT_SECRET,ARGON2_SECRET,GOOGLE_OAUTH_CLIENT_ID,GOOGLE_OAUTH_CLIENT_SECRET,SENTRY_DSN,SENTRY_RELEASE,DOCKER_IMAGE
          script: |
            cd /root/deployment

            mkdir -p /var/log/ukhsc-system-backend
            chmod 755 /var/log/ukhsc-system-backend

            chmod +x scripts/*.sh
            scripts/deploy.sh $DOCKER_IMAGE

      - name: Update Deployment Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const deployment_id = ${{ steps.deployment.outputs.result }};
            const success = '${{ job.status }}' === 'success';

            try {
              const status = {
                owner,
                repo,
                deployment_id,
                state: success ? 'success' : 'failure',
                description: success ? 'Deployment succeeded!' : 'Deployment failed',
                log_url: `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`,
                environment_url: success ? 'https://api.ukhsc.org' : undefined,
                auto_inactive: success
              };

              console.log('Updating deployment status:', status);
              await github.rest.repos.createDeploymentStatus(status);

              if (!success) {
                core.setFailed('Deployment failed');
              }
            } catch (error) {
              console.error('Error updating deployment status:', error);
              core.setFailed(error.message);
            }

      - name: Generate ISO Timestamp
        id: timestamp
        run: |
          echo "ISO_TIME=$(date -u -d @${{ github.event.repository.pushed_at }} +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Send Discord Notification
        uses: tsickert/discord-webhook@v6.0.0
        if: always()
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          embed-title: 🍔 UKHSC 系統後端部署通知
          embed-description: |
            ### 部署狀態：${{ job.status == 'success' && '✅ 成功' || '❌ 失敗' }}

            **分支：** `${{ github.ref_name }}`
            **提交者：** ${{ github.actor }}
            **提交訊息：** ${{ github.event.head_commit.message }}
            **部署環境：** VPS Production
            **部署時間：** <t:${{ github.event.repository.pushed_at }}:F>

            [查看部署詳細資訊](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            ${{
              job.status == 'success' && '[前往網站](https://api.ukhsc.org)' || ''
            }}
          embed-color: ${{ job.status == 'success' && '65280' || '16711680' }}
          embed-footer-text: "UKHSC System Backend Deployment"
          embed-timestamp: ${{ steps.timestamp.outputs.ISO_TIME }}
