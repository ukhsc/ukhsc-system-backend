name: Deploy to VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: Build and push Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/ukhsc-system-backend-api:latest .
          docker push ghcr.io/${{ github.repository_owner }}/ukhsc-system-backend-api:latest

      - name: Deploy to VPS using SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_IP }}
          username: root
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Check both ports to determine current environment
            if curl -s http://localhost:3000/health > /dev/null 2>&1; then
              CURRENT_ENV=$(curl -s http://localhost:3000/health | jq -r '.environment')
            elif curl -s http://localhost:3001/health > /dev/null 2>&1; then
              CURRENT_ENV=$(curl -s http://localhost:3001/health | jq -r '.environment')
            else
              CURRENT_ENV="unknown"
            fi

            if [ "$CURRENT_ENV" == "green" ]; then
              TARGET_ENV="blue"
              TARGET_PORT=3001
            else
              TARGET_ENV="green"
              TARGET_PORT=3000
            fi

            echo "Current environment is $CURRENT_ENV. Deploying to $TARGET_ENV."

            # Stop and remove the target environment container if it exists
            docker stop ukhsc-system-backend-api-$TARGET_ENV || true
            docker rm ukhsc-system-backend-api-$TARGET_ENV || true

            docker pull ghcr.io/${{ github.repository_owner }}/ukhsc-system-backend-api:latest

            docker run -d --restart always --name ukhsc-system-backend-api-$TARGET_ENV -p $TARGET_PORT:8787 \
              -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
              -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
              -e GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }} \
              -e GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }} \
              -e CURRENT_ENVIRONMENT=$TARGET_ENV \
              ghcr.io/${{ github.repository_owner }}/ukhsc-system-backend-api:latest

            COUNTER=0
            until curl --silent --fail http://localhost:$TARGET_PORT/health || [ $COUNTER -gt 12 ]; do
              echo "Waiting for $TARGET_ENV to be ready..."
              sleep 5
              COUNTER=$((COUNTER+1))
            done

            if [ $COUNTER -gt 12 ]; then
              echo "Deployment failed: Service did not become healthy within 60 seconds"
              docker stop ukhsc-system-backend-api-$TARGET_ENV || true
              docker rm ukhsc-system-backend-api-$TARGET_ENV || true
              echo "Fetching logs from the failed container..."
              docker logs ukhsc-system-backend-api-$TARGET_ENV > deployment_failed_logs.txt
              cat deployment_failed_logs.txt
              exit 1
            fi

            # Database seeding
            if ! docker exec \
              -e DIRECT_DATABASE_URL=${{ secrets.DATABASE_URL }} \
              ukhsc-system-backend-api-$TARGET_ENV \
              bun seed; then
              echo "Database seed failed. Rolling back deployment..."
              docker stop ukhsc-system-backend-api-$TARGET_ENV || true
              docker rm ukhsc-system-backend-api-$TARGET_ENV || true
              echo "Fetching logs from the failed container..."
              docker logs ukhsc-system-backend-api-$TARGET_ENV > seed_failed_logs.txt
              cat seed_failed_logs.txt
              exit 1
            fi

            sed -i "s/127.0.0.1:[0-9]*/127.0.0.1:$TARGET_PORT/" /etc/nginx/sites-available/default
            systemctl reload nginx

            if [ "$CURRENT_ENV" == "green" ]; then
              docker stop ukhsc-system-backend-api-green || true
              docker rm ukhsc-system-backend-api-green || true
            else
              docker stop ukhsc-system-backend-api-blue || true
              docker rm ukhsc-system-backend-api-blue || true
            fi
