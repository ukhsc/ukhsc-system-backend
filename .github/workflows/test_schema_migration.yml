name: Test Schema Migration

on:
  pull_request:
    paths:
      - "prisma/migrations/**"
      - "prisma/schema.prisma"

jobs:
  test-schema-migration:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install dependencies
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate
          pnpm install

      - name: Find base migration
        id: find-base
        run: |
          BASE_BRANCH=$(gh pr view ${{ github.event.pull_request.number }} --json baseRefName -q .baseRefName)
          git checkout $BASE_BRANCH
          BASE_MIGRATION=$(ls prisma/migrations | sort | tail -n 1)
          echo "base_migration=${BASE_MIGRATION}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Apply base migrations
        id: base-migrations
        run: |
          export DATABASE_URL="postgresql://test:test@localhost:5432/test_db"
          git checkout ${{ github.event.pull_request.head.ref }}
          pnpm prisma migrate reset --force
          echo "Database structure after base migrations:" >> migration_output.log
          pnpm prisma db pull --print >> migration_output.log

      - name: Test new migrations
        id: test-migrations
        run: |
          export DATABASE_URL="postgresql://test:test@localhost:5432/test_db"

          # Get new migration files
          NEW_MIGRATIONS=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} -- prisma/migrations)
          echo "new_migrations=${NEW_MIGRATIONS}" >> $GITHUB_OUTPUT

          # Apply new migrations
          if ! pnpm prisma migrate deploy; then
            echo "error_message=$(pnpm prisma migrate deploy 2>&1)" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "Final database structure:" >> migration_output.log
          pnpm prisma db pull --print >> migration_output.log

      - name: Comment on PR
        if: failure() && steps.test-migrations.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const error = process.env.ERROR_MESSAGE;
            const newMigrations = process.env.NEW_MIGRATIONS.split('\n');

            const comment = `❌ Migration Test Failed

            ### Error Message
            \`\`\`
            ${error}
            \`\`\`

            ### Affected Migration Files
            ${newMigrations.map(file => `- ${file}`).join('\n')}

            Please check the workflow logs for more details.`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
        env:
          ERROR_MESSAGE: ${{ steps.test-migrations.outputs.error_message }}
          NEW_MIGRATIONS: ${{ steps.test-migrations.outputs.new_migrations }}

      - name: Upload migration logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: migration-logs
          path: migration_output.log
